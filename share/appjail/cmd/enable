#!/bin/sh
#
# Copyright (c) 2022-2023, Jes√∫s Daniel Colmenares Oviedo <DtxdF@disroot.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

lib_load "${LIBDIR}/check_func"
lib_load "${LIBDIR}/colors"
lib_load "${LIBDIR}/random"
lib_load "${LIBDIR}/replace"

enable_desc="Set default parameters for stages."

enable_main()
{
	local _o
	local jail_path
	local bootdir
	local jail_name="$1"
	local command="$2"

	shift 2

	if lib_check_empty "${jail_name}" || lib_check_empty "${command}"; then
		enable_usage
		exit ${EX_USAGE}
	fi

	if ! lib_check_jailname "${jail_name}"; then
		lib_err ${EX_DATAERR} "Invalid jail name \"${jail_name}\""
	fi

	if [ $# -eq 0 ]; then
		enable_usage
		exit ${EX_USAGE}
	fi

	lib_set_logprefix " [`random_color`${jail_name}${COLOR_DEFAULT}]"

	jail_path="${JAILDIR}/${jail_name}"
	if [ ! -d "${jail_path}/jail" ]; then
		lib_err ${EX_NOINPUT} "Cannot find the jail \`${jail_name}\`"
	fi

	case "${command}" in
		start|stop|run) ;;
		*) enable_usage; exit ${EX_USAGE} ;;
	esac

	bootdir="${jail_path}/conf/boot/${command}"
	if ! mkdir -p "${bootdir}"; then
		lib_err ${EX_SOFTWARE} "Error creating ${bootdir}."
	fi

	enable_${command} "${jail_name}" "$@"
}

enable_start()
{
	local _o
	local jail_name
	local jail_path
	local bootdir
	local opt_run_initscript=1
	local create_args=
	local initscript=
	local start_args=
	local template=
	local environment=

	jail_name="$1"; shift
	jail_path="${JAILDIR}/${jail_name}"
	bootdir="${jail_path}/conf/boot/start"

	while getopts "Ic:i:s:t:V:" _o; do
		case "${_o}" in
			I)
				opt_run_initscript=0
				;;
			c)
				local arg="${OPTARG}"
				arg=`lib_escape_string "${arg}" "" '\"' "-"`

				create_args="${create_args} \"${arg}\""
				;;
			i)
				initscript="${OPTARG}"
				;;
			s)
				local arg="${OPTARG}"
				arg=`lib_escape_string "${arg}" "" '\"' "-"`

				start_args="${start_args} \"${arg}\""
				;;
			t)
				template="${OPTARG}"
				;;
			V)
				local env_var="${OPTARG}"
				env_var=`lib_escape_string "${env_var}" "" '\"' "-"`

				environment="${environment} \"${env_var}\""
				;;
			*)
				lib_err ${EX_DATAERR} "Invalid option -- ${OPTARG}"
				;;
		esac
	done

	if [ ${opt_run_initscript} -eq 0 ]; then
		if [ ! -f "${bootdir}/norun_initscript" ]; then
			touch -- "${bootdir}/norun_initscript" || exit ${EX_IOERR}
		fi
	fi

	if ! lib_check_empty "${create_args}"; then
		printf "%s\n" "${create_args}" > "${bootdir}/create_args" || exit ${EX_IOERR}
	fi

	if ! lib_check_empty "${initscript}"; then
		printf "%s\n" "${initscript}" > "${bootdir}/initscript" || exit ${EX_IOERR}
	fi

	if ! lib_check_empty "${start_args}"; then
		printf "%s\n" "${start_args}" > "${bootdir}/start_args" || exit ${EX_IOERR}
	fi

	if ! lib_check_empty "${template}"; then
		printf "%s\n" "${template}" > "${bootdir}/template" || exit ${EX_IOERR}
	fi

	if ! lib_check_empty "${environment}"; then
		printf "%s\n" "${environment}" > "${bootdir}/environment" || exit ${EX_IOERR}
	fi
}

enable_stop()
{
	local _o
	local jail_name
	local jail_path
	local bootdir
	local opt_run_initscript=1
	local initscript=
	local args=
	local environment=

	jail_name="$1"; shift
	jail_path="${JAILDIR}/${jail_name}"
	bootdir="${jail_path}/conf/boot/stop"

	while getopts ":Ii:p:V:" _o; do
		case "${_o}" in
			I)
				opt_run_initscript=0
				;;
			i)
				initscript="${OPTARG}"
				;;
			p)
				local arg="${OPTARG}"
				arg=`lib_escape_string "${arg}" "" '\"' "-"`

				args="${args} \"${arg}\""
				;;
			V)
				local env_var="${OPTARG}"
				env_var=`lib_escape_string "${env_var}" "" '\"' "-"`

				environment="${environment} \"${env_var}\""
				;;
			*)
				lib_err ${EX_DATAERR} "Invalid option -- ${OPTARG}"
				;;
		esac
	done

	if [ ${opt_run_initscript} -eq 0 ]; then
		touch "${bootdir}/norun_initscript"
	fi

	if ! lib_check_empty "${initscript}"; then
		printf "%s\n" "${initscript}" > "${bootdir}/initscript" || exit ${EX_IOERR}
	fi

	if ! lib_check_empty "${args}"; then
		printf "%s\n" "${args}" > "${bootdir}/args" || exit ${EX_IOERR}
	fi

	if ! lib_check_empty "${environment}"; then
		printf "%s\n" "${environment}" > "${bootdir}/environment" || exit ${EX_IOERR}
	fi
}

enable_run()
{
	local _o
	local jail_name
	local jail_path
	local bootdir
	local initscript=
	local args=
	local environment=

	jail_name="$1"; shift
	jail_path="${JAILDIR}/${jail_name}"
	bootdir="${jail_path}/conf/boot/run"

	while getopts ":i:p:V:" _o; do
		case "${_o}" in
			i)
				initscript="${OPTARG}"
				;;
			p)
				local arg="${OPTARG}"
				arg=`lib_escape_string "${arg}" "" '\"' "-"`

				args="${args} \"${arg}\""
				;;
			V)
				local env_var="${OPTARG}"
				env_var=`lib_escape_string "${env_var}" "" '\"' "-"`

				environment="${environment} \"${env_var}\""
				;;
			*)
				lib_err ${EX_DATAERR} "Invalid option -- ${OPTARG}"
				;;
		esac
	done

	if ! lib_check_empty "${initscript}"; then
		printf "%s\n" "${initscript}" > "${bootdir}/initscript" || exit ${EX_IOERR}
	fi

	if ! lib_check_empty "${args}"; then
		printf "%s\n" "${args}" > "${bootdir}/args" || exit ${EX_IOERR}
	fi

	if ! lib_check_empty "${environment}"; then
		printf "%s\n" "${environment}" > "${bootdir}/environment" || exit ${EX_IOERR}
	fi
}

enable_help()
{
	man 1 appjail-enable
}

enable_usage()
{
	cat << EOF
usage: enable <jail> start [-I] [[-c <parameter>=<value>] ...] [-i <initscript>] [[-s <parameter>=<value>] ...]
                           [-t <template>] [[-V <name>=<value>] ...]
       enable <jail> stop [-I] [-i <initscript>] [[-p <parameter>=<value>] ...] [[-V <name>=<value>] ...]
       enable <jail> run [-i <initscript>] [[-p <parameter>=<value>] ...] [[-V <name>=<value>] ...]
EOF
}

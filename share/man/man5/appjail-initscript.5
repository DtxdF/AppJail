.\"Copyright (c) 2024, Jes√∫s Daniel Colmenares Oviedo <DtxdF@disroot.org>
.\"All rights reserved.
.\"
.\"Redistribution and use in source and binary forms, with or without
.\"modification, are permitted provided that the following conditions are met:
.\"
.\"* Redistributions of source code must retain the above copyright notice, this
.\"  list of conditions and the following disclaimer.
.\"
.\"* Redistributions in binary form must reproduce the above copyright notice,
.\"  this list of conditions and the following disclaimer in the documentation
.\"  and/or other materials provided with the distribution.
.\"
.\"* Neither the name of the copyright holder nor the names of its
.\"  contributors may be used to endorse or promote products derived from
.\"  this software without specific prior written permission.
.\"
.\"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
.\"AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\"IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
.\"DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
.\"FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\"DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\"SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
.\"CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
.\"OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\"OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.Dd March 25, 2024
.Dt APPJAIL-INITSCRIPT 5
.Os
.Sh NAME
.Nm appjail-initscript
.Nd Jail automation script
.Sh DESCRIPTION
An
.Sy InitScript
is an
.Xr sh 1
script that has functions with a special meaning that are executed in specific
operations.
.Sy InitScripts
are the core of
.Sy Makejails ","
as the latter generate the former.
.Sh FUNCTIONS
The following functions are formally known as stages.
.Bl -tag -width xxxxx
.It create
Stage executed by
.Xr appjail-start 1
before the jail is started.
.It start
Stage executed by
.Xr appjail-start 1
after the jail is started.
.It stop
Stage executed by
.Xr appjail-stop 1
before the jail is stopped.
.It cmd
Stage executed by
.Xr appjail-run 1 "."
.It custom:<arbitrary string>
Stage executed by
.Xr appjail-run 1 "."
The difference between
.Sy cmd
and this stage is that the latter can be defined using a valid arbitrary string.
A valid arbitrary string is
.Sy "^[a-zA-Z0-9_][a-zA-Z0-9_-]*$"
.It apply
Stage executed by
.Xr appjail-apply 1 "."
.El
.Sh PRE- AND POST- FUNCTIONS
Each stage has a
.Sy pre-
and
.Sy post-
function that are executed before the main function is executed and after the main function is executed, e.g.
.Sy create
can have
.Sy precreate
and
.Sy postcreate "."
.Pp
.Sy pre-
is executed before the stage is executed and if it fails, the stage will not be executed.
.Sy post-
will be executed after
.Sy pre-
and the stage even if they fail.
.Sy pre-
and the stage affect the exit status, but
.Sy post-
does not.
.Sh ARGUMENTS
Without user input an
.Sy InitScript
is meaningless, but the way external commands like
.Xr appjail-start 1 ","
.Xr appjail-stop 1 ","
.Xr appjail-run 1
and
.Xr appjail-apply 1
pass arguments is a bit different than an
.Xr sh 1
script.
.Pp
Each parameter begins with a double dash followed by an arbitrary string followed by the value. For example, the parameter
.Sy foo=bar
will be expressed internally as
.Cm --foo
.Qq Ar bar
.Ns .
.Pp
Each
.Sy pre-
and
.Sy post-
stage will receive the same parameters as the main stage.
.Pp
See
.Sx EXAMPLES
for more details.
.Sh SUBROUTINES
An
.Sy InitScript
is as powerful as any other
.Xr sh 1
script, the problem is that although the built-in environment variables can help, they are not enough for some common tasks, that's why there is a
.Dq library
with some subroutines you can use, inspired by
.Xr appjail-makejail 5 "."
.Pp
.Bl -tag -width xxx
.It Cm INITENV
After this function finishes executing, commands such as
.Cm CMD
will use the environment variables according to the
.Fl V
parameter in commands such as
.Xr appjail-start 1 Ns ,
.Xr appjail-stop 1
and
.Xr appjail-run 1 Ns "."
.Pp
If you want to respect the environment variables provided by the user, you must call this function after
.Cm ENV Ns ,
in case you call the last function.
.It Cm ENV Ar name Oo Ar value Oc
Sets another environment variable for use in commands such as
.Cm CMD Ns "."
.It Cm CMD Oo Fl l Oc Oo Oo Fl e Ar name Ns = Ns Oo Ar value Oc Oc No "..." Oc Oo Fl u Ar username Oc Oo Fl w Ar workdir Oc Ar command Oo Ar args No "..." Oc
Execute a command inside the jail.
.Bl -tag -width xxxx
.It Fl l
Unlike
.Xr jexec 8 Ns "'s" Fl l Ns ,
this indicates not to clean the environment.
.It Fl e Ar name Ns = Ns Oo Ar value Oc
Sets an environment variable only for the call to this function. Environment variables defined by this parameter take precedence over
.Cm INITENV
or
.Cm ENV Ns "."
.It Fl u Ar username
Username to execute the command as.
.It Fl w Ar workdir
Working directory. See also
.Cm WORKDIR Ns "."
.El
.It Cm LOCAL Oo Oo Fl j Ns | Ns Fl r Oc Oc Ar command Oo Ar args No "..." Oc
Execute a command from the host but within the jail directory
.Pq Fl j
or the root directory of the jail
.Po Fl r Pc Ns "."
.It Cm CHROOT Ar command Oo Ar args No "..." Oc
Execute a command using
.Xr appjail-cmd 1 Cm chroot Ns "."
.It Cm JAILDIR Ar command Oo Ar args No "..." Oc
Execute a command using
.Xr appjail-cmd 1 Cm jaildir Ns "."
.It Cm PKG Oo Oo Fl c Ns | Ns Fl j Oc Oc Ar args No "..."
Manipulate packages within a jail.
.Pp
By default,
.Xr appjail-pkg 1 Cm jail
is used, but you can change it to
.Xr appjail-pkg 1 Cm chroot
when using
.Fl c
instead. Use
.Fl j
to use
.Xr pkg 8
from inside the jail instead of the host.
.It Cm ARG Ar name Oo Ar default-value Oc
Defines a new parameter that can be parsed using
.Cm PARSE Ns "."
Unlike the
.Cm ARG
instruction of
.Xr appjail-makejail 5 Ns ,
there is no such thing as a required argument, but you can easily check whether a variable is defined or not using utilities like
.Xr test 1 Ns "."
.Pp
You can access variable values using a syntax like
.Em ${ARG_<name>}
or
.Em $ARG_<name> Ns "."
.It Cm PARSE Oo Ar args No "..." Oc
Parse the arguments. You must pass the arguments of the stage as arguments to this function.
.It Cm VOLUME Oo Fl g Ar group Oc Oo Fl m Ar mountpoint Oc Oo Fl o Ar owner Oc Oo Fl p Ar perm Oc Oo Fl t Ar type Oc Ar name
See
.Xr appjail-volume 1 Ns "."
.It Cm DEVICE:SET Ar args No "..."
See
.Xr appjail-devfs 1 Cm set Ns "."
.It Cm DEVICE:APPLYSET
See
.Xr appjail-devfs 1 Cm applyset Ns "."
.It Cm LABEL:ADD Ar name Oo Ar value Oc
See
.Xr appjail-label 1 Cm add Ns "."
.It Cm LABEL:GET Ar name
Get the value of a label. If the label does not exist, an empty value is returned
and the exit status is modified accordingly.
.It Cm MOUNT Oo Fl MP Oc Oo Fl n Ar nro Oc Ar device Ar mountpoint Oo Ar type Oo Ar options Oo Ar dump Oo Ar pass Oc Oc Oc Oc
Use
.Xr appjail-fstab 1
to create a new entry in the
.Xr fstab 5
of the jail and, unless the
.Fl M
parameter is set, the file will be compiled and the entries mounted. If the
.Fl P
parameter is specified,
.Xr mount 8
is used instead.
.It Cm UMOUNT Ar mountpoint
See
.Xr umount 8 Ns "."
.Pp
.Ar mountpoint
is a mount point relative to the jail directory.
.It Cm REPLACE Ar file Ar keyword Oo Ar value Oc Oo Ar output Oc
Replace a given
.Ar keyword
.Pq without being enclosed in Sy %{ No and Sy }
with a
.Ar value
.Pq or empty, if not defined
in a
.Ar file Ns "." Keywords begin with the
.Sy %
character and then the keyword name enclosed in curly braces. Use
.Sy %
twice to escape, for example
.Sy %%{KEYWORD}
will be converted to
.Sy %{KEYWORD} Ns ,
but will not be replaced by any value. A different file can be used as
.Ar output
for the replaced keywords.
.It Cm SERVICE Ar args No "..."
See
.Xr appjail-service 1 Ns "."
.It Cm SYSRC Oo Fl l Oc Ar args No "..."
See
.Xr appjail-sysrc 1 Ns "."
.Pp
If
.Fl l
is specified,
.Xr appjail-sysrc 1 Cm local
is used instead of
.Xr appjail-sysrc 1 Cm jail Ns "."
.It Cm WORKDIR Ar directory
Sets the working directory of commands such as
.Cm REPLACE
and
.Cm CMD Ns "."
.El
.Sh ENVIRONMENT
.Bl -tag -width xxxx
.It Ev APPJAIL_CONFIG
AppJail configuration file.
.It Ev APPJAIL_JAILDIR
Jail directory.
.It Ev APPJAIL_JAILNAME
Jail name.
.It Ev APPJAIL_ROOTDIR
Root directory of the jail.
.It Ev APPJAIL_SCRIPT
Pathname to the AppJail script.
.El
.Sh FILES
.Bl -tag -width xxxx
.It Pa ${LIBDIR}/initscript
File with some common subroutines.
.El
.Sh EXAMPLES
.Ss Arguments
The following
.Sy InitScript
is used to show how parameters and arguments are passed.
.Pp
.Pa $PWD/initscript.sh
.Ns :
.Bd -literal -compact -offset Ds
_parse_args()
{
	local arg
	for arg in "$@"; do
		printf "<%s> " "${arg}"
	done
	echo
}

precreate()
{
	echo -n "precreate args: "
	_parse_args "$@"
}

create()
{
	echo -n "create args: "
	_parse_args "$@"
}

postcreate()
{
	echo -n "postcreate args: "
	_parse_args "$@"
}

prestart()
{
	echo -n "prestart args: "
	_parse_args "$@"
}

start()
{
	echo -n "start args: "
	_parse_args "$@"
}

poststart()
{
	echo -n "poststart args: "
	_parse_args "$@"
}

precmd()
{
	echo -n "precmd args: "
	_parse_args "$@"
}

cmd()
{
	echo -n "cmd args: "
	_parse_args "$@"
}

postcmd()
{
	echo -n "postcmd args: "
	_parse_args "$@"
}

prestop()
{
	echo -n "prestop args: "
	_parse_args "$@"
}

stop()
{
	echo -n "stop args: "
	_parse_args "$@"
}

poststop()
{
	echo -n "poststop args: "
	_parse_args "$@"
}
.Ed
.Pp
.Bd -literal -compact -offset Ds
.No # Nm appjail quick Ar jtest Cm overwrite Cm initscript Ns = Ns Ar $PWD/initscript.sh
...
.No # Nm appjail start No \e
.No "    " Fl c Ar 'parameter1=I am the <create> parameter #1' No \e
.No "    " Fl c Ar 'parameter2=I am the <create> parameter #2' No \e
.No "    " Fl s Ar 'parameter1=I am the <start> parameter #1' No \e
.No "    " Fl s Ar 'parameter2=I am the <start> parameter #2' No \e
.No "    " Ar jtest
.No "..."
[00:00:01] [ debug ] [jtest] Running initscript `/usr/local/appjail/jails/jtest/init` ...
[00:00:01] [ debug ] [jtest] Running precreate() ...
precreate args: <--parameter1> <I am the <create> parameter #1> <--parameter2> <I am the <create> parameter #2>
[00:00:01] [ debug ] [jtest] precreate() exits with status code 0
create args: <--parameter1> <I am the <create> parameter #1> <--parameter2> <I am the <create> parameter #2>
[00:00:01] [ debug ] [jtest] create() exits with status code 0
postcreate args: <--parameter1> <I am the <create> parameter #1> <--parameter2> <I am the <create> parameter #2>
[00:00:01] [ debug ] [jtest] postcreate() exits with status code 0
[00:00:01] [ debug ] [jtest] `/usr/local/appjail/jails/jtest/init` exits with status code 0
[00:00:01] [ debug ] [jtest] Creating...
jtest: created
[00:00:01] [ debug ] [jtest] Running initscript `/usr/local/appjail/jails/jtest/init` ...
[00:00:01] [ debug ] [jtest] Running prestart() ...
prestart args: <--parameter1> <I am the <start> parameter #1> <--parameter2> <I am the <start> parameter #2>
[00:00:01] [ debug ] [jtest] prestart() exits with status code 0
start args: <--parameter1> <I am the <start> parameter #1> <--parameter2> <I am the <start> parameter #2>
[00:00:01] [ debug ] [jtest] start() exits with status code 0
poststart args: <--parameter1> <I am the <start> parameter #1> <--parameter2> <I am the <start> parameter #2>
[00:00:01] [ debug ] [jtest] poststart() exits with status code 0
[00:00:01] [ debug ] [jtest] `/usr/local/appjail/jails/jtest/init` exits with status code 0
.No "..."
.No # Nm appjail run Fl p Ar 'msg=Hello, world!' Ar jtest
[00:00:01] [ debug ] [jtest] Running initscript `/usr/local/appjail/jails/jtest/init` ...
[00:00:01] [ debug ] [jtest] Running precmd() ...
precmd args: <--msg> <Hello, world!>
[00:00:01] [ debug ] [jtest] precmd() exits with status code 0
cmd args: <--msg> <Hello, world!>
[00:00:01] [ debug ] [jtest] cmd() exits with status code 0
postcmd args: <--msg> <Hello, world!>
[00:00:01] [ debug ] [jtest] postcmd() exits with status code 0
[00:00:01] [ debug ] [jtest] `/usr/local/appjail/jails/jtest/init` exits with status code 0
.No # Nm appjail stop Fl p Ar 'msg=Bye ...' jtest
[00:00:01] [ debug ] [jtest] Running initscript `/usr/local/appjail/jails/jtest/init` ...
[00:00:01] [ debug ] [jtest] Running prestop() ...
prestop args: <--msg> <Bye ...>
[00:00:01] [ debug ] [jtest] prestop() exits with status code 0
stop args: <--msg> <Bye ...>
[00:00:01] [ debug ] [jtest] stop() exits with status code 0
poststop args: <--msg> <Bye ...>
[00:00:01] [ debug ] [jtest] poststop() exits with status code 0
[00:00:01] [ debug ] [jtest] `/usr/local/appjail/jails/jtest/init` exits with status code 0
[00:00:01] [ warn  ] [jtest] Stopping jtest...
jtest: removed
[00:00:01] [ debug ] [jtest] unmounting: umount "/usr/local/appjail/jails/jtest/jail/.appjail"
.Ed
.Ss Environment Variables
.Xr appjail 1
runs the
.Sy InitScript
from the host instead of in the jail, so it needs to explicitly call
.Xr jexec 8 "."
The reason is that this allows you to perform some tasks for both the host and the
jail much more easily, e.g. mount a filesystem dynamically. The problem is that
you should not call
.Xy jexec 8
with a fixed string, such as the jail name, as this can cause the jail name to be
changed to any other arbitrary string. The solution is not really difficult: use
environment variables that are best described in
.Sx ENVIRONMENT
.Ns .
.Bd -literal -compact -offset Ds
cmd()
{
	jexec -l "${APPJAIL_JAILNAME}" sh -c 'echo "Hello, world!"'
}
.Ed
.Sh SEE ALSO
.Xr appjail-makejail 1
.Xr appjail-quick 1
.Xr appjail-makejail 5
.Sh AUTHORS
.An Jes√∫s Daniel Colmenares Oviedo Aq Mt DtxdF@disroot.org
.Sh CAVEATS
An
.Sy InitScript
can't be used in a
.Sy Makejail
using the
.Sy initscript
option that is passed later to
.Xr appjail-quick 1
because the latter will overwrite the former.
